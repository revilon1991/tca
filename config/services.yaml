parameters:
    tarantool.queue.runtime_mode: false

services:
    _defaults:
        autowire: true
        autoconfigure: true
        bind:
            $projectDir: '%kernel.project_dir%'
            $photoPublicDir: '%kernel.project_dir%/public/photo'
            $tarantoolQueueRuntimeMode: '%tarantool.queue.runtime_mode%'
            $domain: '%env(DOMAIN)%'

    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Dto,Enum,Migrations,Tests,Kernel.php}'

    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    App\EventListener\:
        resource: '../src/EventListener'
        tags:
            - { name: doctrine.event_subscriber }

    _instanceof:
        App\Component\Tensorflow\Provider\TensorflowProviderInterface:
            tags: ['tensorflow.provider']
        App\Component\Tarantool\Consumer\AbstractConsumer:
            tags: ['tarantool.queue.consumer']
        Sonata\AdminBundle\Controller\CRUDController:
            tags: ['controller.service_arguments']
        App\Component\Csrf\CsrfSetterAwareInterface:
            tags:
                - { name: kernel.event_listener, event: kernel.response }
        App\Component\Csrf\CsrfValidatorAwareInterface:
            tags:
                - { name: kernel.event_listener, event: kernel.request }

    App\Component\Telegram\Provider\TelegramProvider:
        arguments:
            $proxyHost: '%env(string:PROXY_HOST)%'
            $proxyPort: '%env(int:PROXY_PORT)%'
            $proxyUsername: '%env(string:PROXY_USERNAME)%'
            $proxyPassword: '%env(string:PROXY_PASSWORD)%'
            $appId: '%env(string:MADELINEPROTO_CONNECTION_API_ID)%'
            $appHash: '%env(string:MADELINEPROTO_CONNECTION_API_HASH)%'
            $botToken: '%env(string:MADELINEPROTO_CONNECTION_BOT_TOKEN)%'

    App\Admin\GroupAdmin:
        public: true
        arguments:
            - ~
            - App\Entity\Group
            - App\Admin\Controller\GroupController
        tags:
            - { name: sonata.admin, manager_type: orm, group: Analytics, label: Group }

    App\Admin\SubscriberAdmin:
        public: true
        arguments:
            - ~
            - App\Entity\Subscriber
            - ~
        tags:
            - { name: sonata.admin, manager_type: orm, group: Analytics, label: Subscriber }

    App\Component\Tensorflow\Service\TensorflowService: [!tagged tensorflow.provider]

    App\Component\Tensorflow\Provider\TensorflowPoetsProvider:
        bind:
            $tensorflowForPoetsRepositoryPath: '%env(string:TENSORFLOW_FOR_POETS_REPOSITORY_PATH)%'

    Symfony\Component\Mime\MimeTypesInterface: '@mime_types'

    Tarantool\Client\Client:
        factory: ['Tarantool\Client\Client', 'fromDsn']
        arguments:
            - '%env(TARANTOOL_URL)%'

    App\Component\Tarantool\Handler\ConsumerHandler: [!tagged tarantool.queue.consumer]

    Lcobucci\JWT\Signer\Hmac\Sha256: ~

    App\Component\JwtToken\Handler\JwtTokenHandler:
        arguments:
            - '@Lcobucci\JWT\Signer\Hmac\Sha256'
            - '%env(JWT_TOKEN_SIGNATURE)%'
            - '%env(DOMAIN)%'
            - '%env(DOMAIN)%'

    App\UseCase\BotUpdates\BotUpdatesHandler:
        bind:
            $proxyUrl: '%env(resolve:PROXY_URL)%'
            $botToken: '%env(string:MADELINEPROTO_CONNECTION_BOT_TOKEN)%'

    GuzzleHttp\Client: ~

    App\EventListener\ApiResponseListener:
        decorates: Wakeapp\Bundle\ApiPlatformBundle\EventListener\ApiResponseListener
        arguments:
            $guesser: '@App\Guesser\AppApiErrorCodeGuesser'
            $apiResultDtoClass: App\Dto\ApiDocResultDto
            $debug: '%env(bool:API_RESPONSE_DEBUG)%'

    App\UseCase\SendMail\SendMailHandler:
        bind:
            $mailerDsn: '%env(MAILER_DSN)%'

    App\UseCase\SendTelegramMessage\SendTelegramMessageHandler:
        bind:
            $proxyUrl: '%env(resolve:PROXY_URL)%'
            $botToken: '%env(string:MADELINEPROTO_CONNECTION_BOT_TOKEN)%'
